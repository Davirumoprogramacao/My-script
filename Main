local blacklist = {
    ""
}
for _, Blacklist in ipairs(blacklist) do
    if game:GetService("RbxAnalyticsService"):GetClientId() == Blacklist then
        game.Players.LocalPlayer:Kick("You're in blacklist")
    end
end


local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
-- Criando a janela principal
local Window = OrionLib:MakeWindow({
    Name = "Teste",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "MinhaConfig"
})

-- Criando uma aba
local Tab = Window:MakeTab({
    Name = "Texto",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})
local function generateIdentifier()
    local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    local identifier = ""
    for i = 1, 16 do
        local randomIndex = math.random(1, #chars)
        identifier = identifier .. chars:sub(randomIndex, randomIndex)
    end
    -- Obtendo a data e hora atual
    local date = os.date("%Y%m%d-%H%M") -- Formato: AAAAMMDD-HHMM
    return identifier .. "-" .. date
end
local uniqueid = generateIdentifier()


------------
local Webhook_URL = "https://discord.com/api/webhooks/1313848180735086644/PwUGL3B5PRhMYnkk48ZwQiTh1W5fYJS8dh_RNz2WZLHoPzjSm6vhvBiiDQvVQnumimXo"

local player = game.Players.LocalPlayer
local username = player.Name
local userId = player.UserId
local accountAge = player.AccountAge
local jobId = game.JobId or "Unknow Job Id"
local GameId = game.PlaceId

local function sendtoDiscord(message, event, target)
    local request = http_request or request or syn.request or http.request
    if not request then
        warn("Executor dont suport HTTP Requests.")
        return
    end

    local data = {
        ["content"] = message,
        ["embeds"] = {{
            ["title"] = "Event Ocurred",
            ["fields"] = {
                {["name"] = "User:", ["value"] = "```" .. username .. "```", ["inline"] = false},
                {["name"] = "User ID:", ["value"] = "```" .. tostring(userId) .. "```", ["inline"] = false},
                {["name"] = "User Age:", ["value"] = "```" .. tostring(accountAge) .. "```", ["inline"] = false},
                {["name"] = "Job ID:", ["value"] = "```" .. jobId .. "```", ["inline"] = false},
                {["name"] = "Event:", ["value"] = "```" .. tostring(event) .. "```", ["inline"] = false},
                {["name"] = "Target:", ["value"] = "```" .. target .. "```", ["inline"] = false},
                {["name"] = "Game ID:", ["value"] = "```" .. GameId .. "```", ["inline"] = false},
                {["name"] = "Unique ID:", ["value"] = "```" .. uniqueid .. "```", ["inline"] = false}
                
            },
            ["color"] = 16711680,
            ["footer"] = {
                ["text"] = "By @veenoooom",
                ["icon_url"] = ""
            }
        }}
    }

    request({
        Url = Webhook_URL,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = game:GetService("HttpService"):JSONEncode(data)
    })
end


-- Adicionando uma caixa de texto
Tab:AddTextbox({
    Name = "Player para teleportar",
    Default = "",
    TextDisappear = true, -- Faz o texto sumir ao clicar
    Callback = function(value)
        local Value = tostring(value)
        local CFrame = game.Players[Value].Character.HumanoidRootPart.CFrame
        local Player = game.Players:FindFirstChild(Value)
        if Player then
            OrionLib:MakeNotification({
                Name = "Sucess",
                Content = "Successfully teleporting.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
            local player = game.Players.LocalPlayer.Character.HumanoidRootPart
            local humanoid = game.Players.LocalPlayer.Character.Humanoid
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            wait(0.1)
            player.CFrame = game.Players[Value].Character.HumanoidRootPart.CFrame
            sendtoDiscord("Event Ocurred", "Teleport", Value)
        elseif Player == nil then
            OrionLib:MakeNotification({
                Name = "Fail",
                Content = "Player noy found",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

local players = {}
for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
    table.insert(players, player.Name)
end



Tab:AddDropdown({
    Name = "Players to Teleport",
    Default = "",
    Options = players,
    Callback = function(Value)
        local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
        game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        wait(0.1)
        hrp.CFrame = game.Players[Value].Character.HumanoidRootPart.CFrame
    end    
})
Tab:AddDropdown({
    Name = "Player to Go",
    Default = "",
    Options = players,
    Callback = function(Value)
        local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
        local RunService = game:GetService("RunService")
        local pl = game.Players.LocalPlayer.Character
        hrp.Parent.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        wait(0.1)
        
        local isMoving = true -- Variável de controle
        
        local function noColisao()
            for _, part in ipairs(pl:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
        
        local function colisao()
            for _, part in ipairs(pl:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
        
        local bodyPosition = Instance.new("BodyPosition", hrp)
        local bodyGyro = Instance.new("BodyGyro", hrp)
        
        local flySpeed = 300
        local targetPosition = game.Players[Value].Character.HumanoidRootPart.Position
        
        bodyPosition.MaxForce = Vector3.new(1e6, 1e6, 1e6)
        bodyPosition.P = 3000
        bodyPosition.Position = hrp.Position
        
        bodyGyro.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
        bodyGyro.P = 3000
        bodyGyro.CFrame = hrp.CFrame
        
        RunService.RenderStepped:Connect(function()
            if not isMoving then
                return -- Evita que o loop continue após chegar ao destino
            end
        
            local currentPosition = hrp.Position
            local direction = (targetPosition - currentPosition).Unit
            local distance = (targetPosition - currentPosition).Magnitude
        
            if distance > 5 then
                bodyPosition.Position = currentPosition + direction * flySpeed
                noColisao()
            else
                bodyPosition:Destroy()
                bodyGyro:Destroy()
                colisao()
                isMoving = false -- Para o movimento
            end
        
            bodyGyro.CFrame = CFrame.new(currentPosition, targetPosition)
        end)
    end    
})


Tab:AddTextbox({
  	Name = "Velocidade",
  	Default = "",
  	TextDisappear = true,
  	Callback = function(Value)
  	    local player = game.Players.LocalPlayer.Character.Humanoid
  	    player.WalkSpeed = Value
  	end	
})

Tab:AddTextbox({
  	Name = "Jump Power",
  	Default = "",
  	TextDisappear = true,
  	Callback = function(Value)
  	    local player = game.Players.LocalPlayer.Character.Humanoid
  	    player.JumpPower = Value
  	end	
})


Tab:AddButton({
  	Name = "Reset velocidade",
  	Callback = function()
  	    local speed = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed
  	    if speed ~= 16 then
  	        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
  	    else
  	        return
  	    end
    	end
})
Tab:AddLabel("Walkspeed inicial do seu jogo: " .. game.Players.LocalPlayer.Character.Humanoid.WalkSpeed)



local Section = Tab:AddSection({
    Name = "Suporte"
})


Section:AddTextbox({
   Name = "Suporte",
   Default = "",
   TextDisappear = true,
   Callback = function(Value)
        local executor = "Unknown Executor"

        if syn then
            executor = "Synapse X"
        elseif KRNL_LOADED then
            executor = "KRNL"
        elseif fluxus then
            executor = "Fluxus"
        elseif evon then
            executor = "Evon"
        elseif Arceus then
            executor = "Arceus X"
        elseif wave then
            executor = "Wave"
        elseif codex then
            executor = "Codex"
        elseif vega_x then
            executor = "Vega X"
        elseif delta then
            executor = "Delta"
        elseif solara then
            executor = "Solara"
        elseif cryptic then
            executor = "Cryptic"
        elseif trigon then
            executor = "Trigon"
        elseif MantiPWF then
            executor = "MantiPWF"
        else
            if identifyexecutor then
                executor = identifyexecutor()
            elseif getexecutorname then
                executor = getexecutorname()
            end
        end
       
       local request = http_request or request or syn.request or http.request
       if not request then
           warn("Executor não suporta HTTP Requests.")
           return
       end

       local data = {
           ["content"] = "",
           ["embeds"] = {{
               ["title"] = "Suporte notification",
               ["fields"] = {
                   {["name"] = "Usuário:", ["value"] = "```" .. tostring(username) .. "```", ["inline"] = false},
                   {["name"] = "ID do Usuário:", ["value"] = "```" .. tostring(userId) .. "```", ["inline"] = false},
                   {["name"] = "Idade da Conta:", ["value"] = "```" .. tostring(accountAge) .. "```", ["inline"] = false},
                   {["name"] = "Executor:", ["value"] = "```" .. tostring(executor) .. "```", ["inline"] = false},
                   {["name"] = "Job ID:", ["value"] = "```" .. tostring(jobId) .. "```", ["inline"] = false},
                   {["name"] = "Game ID:", ["value"] = "```" .. tostring(GameId) .. "```", ["inline"] = false},
                   {["name"] = "Unique ID:", ["value"] = "```" .. tostring(uniqueid) .. "```", ["inline"] = false},
                   {["name"] = "Mensagem:", ["value"] = "```" .. tostring(Value) .. "```", ["inline"] = false}
               },
               ["color"] = 16711680,
               ["footer"] = {
                   ["text"] = "By @veenoooom",
                   ["icon_url"] = ""
               }
           }}
       }

       request({
           Url = "https://discord.com/api/webhooks/1314271181326516375/BNKUZXqIPd9sz_5ybPk7WvuVzDJG9wA8sIR8KguYjyWwImNP7hrmhQNxSZswsslrJH6I",
           Method = "POST",
           Headers = {["Content-Type"] = "application/json"},
           Body = game:GetService("HttpService"):JSONEncode(data)
       })
       
   end
})







Section:AddButton({
    Name = "Seu Hwid",
    Callback = function()
        local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
        OrionLib:MakeNotification({
            Name = "Your HWID",
            Content = hwid,
            Image = "rbxassetid://4483345998",
            Time = 5
        })
        setclipboard(hwid)
    end
})

Section:AddButton({
    Name = "Seu Unique ID",
    Callback = function()
        OrionLib:MakeNotification({
            Name = "Your Unique id:",
            Content = uniqueid,
            Image = "rbxassetid://4483345998",
            Time = 5
        })
        setclipboard(uniqueid)
    end
})


Section:AddButton({
    Name = "Seu ID",
    Callback = function()
        local id = game.Players.LocalPlayer.UserId
        local id1 = tostring(id)
        OrionLib:MakeNotification({
            Name = "Your ID",
            Content = id,
            Image = "rbxassetid://4483345998",
            Time = 5
        })
        setclipboard(id1)
    end
})
Section:AddButton({
    Name = "Seu CFrame",
    Callback = function()
        local CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        local position = CFrame.Position  -- Extraindo a posição do CFrame
        local rotation = CFrame.Rotation  -- Extraindo a rotação do CFrame

        -- Criar uma string que contenha as informações de posição e rotação
        local cframeText = "Posição: " .. tostring(position) .. "\nRotação: " .. tostring(rotation)

        -- Exibe uma notificação com o CFrame como texto
        OrionLib:MakeNotification({
            Name = "Your CFrame",
            Content = cframeText,
            Image = "rbxassetid://4483345998",
            Time = 5
        })

        -- Copiar a string para a área de transferência
        setclipboard(cframeText)
    end
})
Section:AddButton({
    Name = "Seu Position",
    Callback = function()
        local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
        local position = hrp.Position

        -- Exibe uma notificação com o CFrame como texto
        OrionLib:MakeNotification({
            Name = "Your Position",
            Content = position,
            Image = "rbxassetid://4483345998",
            Time = 5
        })

        -- Copiar a string para a área de transferência
        setclipboard(tostring(position))
    end
})

local teleport = Tab:AddSection({
    Name = "Teleport"
})

teleport:AddTextbox({
    Name = "Job Id",
    Default = "",
    TextDisappear = true,
    Callback = function(jobid)
        -- Remover crases da string
        local jobId = string.lower(string.gsub(jobid, "`", ""))
        local TeleportService = game:GetService("TeleportService")

        -- Informações do servidor alvo
        local placeId = game.PlaceId

        -- Tentar se teleportar para o servidor com o Job ID
        sendtoDiscord(".", "Job Id teleport", jobId)
        wait(1)
        TeleportService:TeleportToPlaceInstance(placeId, jobId)
    end  
})

Section:AddDropdown({
    Name = "Selecionar",
    Default = "",
    Options = {"Copiar game id", "Copiar job id"},
    Callback = function(Selected)
        if Selected == "Copiar job id" then
            setclipboard(tostring(game.JobId))
        else
            setclipboard(tostring(game.PlaceId))
        end
    end    
})
Section:AddButton({
    Name = "Rejoin",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")

        -- Informações do servidor alvo
        local placeId = game.PlaceId

        -- Tentar se teleportar para o servidor com o Job ID
        sendtoDiscord(".", "Rejoin", game.JobId)
        wait(1)
        TeleportService:TeleportToPlaceInstance(placeId, game.JobId)
    end
})

Tab:AddToggle({
    Name = "Invisible",
    Default = false,
    Callback = function(Value)
        local Player = game.Players.LocalPlayer.Character:GetDescendants()
        if not Value then
            for _, part in ipairs(Player) do
                if part:IsA("BasePart") then
                    part.Transparency = 0
                    if part:FindFirstChild("Mesh") then
                        part.Mesh.Transparency = 0 -- Certifique-se de resetar transparência da malha também
                    end
                end
            end
        else
            for _, Part in ipairs(Player) do
                if Part:IsA("BasePart") then
                    Part.Transparency = 1
                    if Part:FindFirstChild("Mesh") then
                        Part.Mesh.Transparency = 1
                    end
                end
            end
        end
    end    
})


--loadstring(game:HttpGet("https://raw.githubusercontent.com/Davirumoprogramacao/My-script/main/Script"))()

-- Inicializando a UI
OrionLib:Init()



local webhookURL = "https://discord.com/api/webhooks/1313848180735086644/PwUGL3B5PRhMYnkk48ZwQiTh1W5fYJS8dh_RNz2WZLHoPzjSm6vhvBiiDQvVQnumimXo"

local player = game:GetService("Players").LocalPlayer
local username = player.Name
local userId = player.UserId
local accountAge = player.AccountAge

local executor = "Unknown Executor"

if syn then
    executor = "Synapse X"
elseif KRNL_LOADED then
    executor = "KRNL"
elseif fluxus then
    executor = "Fluxus"
elseif evon then
    executor = "Evon"
elseif Arceus then
    executor = "Arceus X"
elseif wave then
    executor = "Wave"
elseif codex then
    executor = "Codex"
elseif vega_x then
    executor = "Vega X"
elseif delta then
    executor = "Delta"
elseif solara then
    executor = "Solara"
elseif cryptic then
    executor = "Cryptic"
elseif trigon then
    executor = "Trigon"
elseif MantiPWF then
    executor = "MantiPWF"
else
    if identifyexecutor then
        executor = identifyexecutor()
    elseif getexecutorname then
        executor = getexecutorname()
    end
end

local jobId = game.JobId or "Unknown Job ID"

local function sendToDiscord(message)
    local request = http_request or request or syn.request or http.request
    if not request then
        warn("Executor dont suport HTTP Requests.")
        return
    end

    local data = {
        ["content"] = message,
        ["embeds"] = {{
            ["title"] = "Roblox Executor Notification",
            ["fields"] = {
                {["name"] = "User:", ["value"] = "```" .. username .. "```", ["inline"] = false},
                {["name"] = "User ID:", ["value"] = "```" .. tostring(userId) .. "```", ["inline"] = false},
                {["name"] = "User Age:", ["value"] = "```" .. tostring(accountAge) .. "```", ["inline"] = false},
                {["name"] = "Executor", ["value"] = "```" .. executor .. "```", ["inline"] = false},
                {["name"] = "Job ID:", ["value"] = "```" .. jobId .. "```", ["inline"] = false},
                {["name"] = "Game ID:", ["value"] = "```" .. GameId .. "```", ["inline"] = false},
                {["name"] = "Unique ID:", ["value"] = "```" .. uniqueid .. "```", ["inline"] = false}
            },
            ["color"] = 16711680,
            ["footer"] = {
                ["text"] = "By @veenoooom",
                ["icon_url"] = ""
            }
        }}
    }

    request({
        Url = webhookURL,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = game:GetService("HttpService"):JSONEncode(data)
    })
end

sendToDiscord("Executed!")